// ------------------------------------------------------
// Prisma/DB
// ------------------------------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------
// Enums
// ------------------------------------------------------
enum Role {
  USER
  ADMIN
}

enum CEFRLevel {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum Skill {
  LISTENING
  READING
  WRITING
  SPEAKING
  GRAMMAR
  VOCABULARY
  PRONUNCIATION
  FUNCTIONAL_LANGUAGE
  MEDIATION
  ASSESSMENT
  CULTURE
}

enum ModuleType {
  LISTENING
  READING
  WRITING
  SPEAKING
  GRAMMAR_STRUCTURE
  VOCAB_LEXICAL
  PRONUNCIATION_PHONETICS
  FUNCTIONAL_COMMUNICATION
  MEDIATION_TRANSLATION
  TEST_REVIEW
  CULTURE_TOPICS_CONTENT
}

enum ActivityType {
  LECTURE // bài học lý thuyết/giới thiệu
  LISTEN_FIND_ERROR // nghe bắt lỗi
  LISTEN_DETAIL // nghe hiểu chi tiết
  LISTEN_GIST // nghe ý chính
  READ_MAIN_IDEA // đọc tìm ý chính
  READ_INFER // đọc suy luận
  READ_SKIMMING // đọc tổng quát
  WRITE_SENTENCE
  WRITE_PARAGRAPH
  WRITE_EMAIL
  WRITE_SHORT_ESSAY
  SPEAK_TOPIC
  SPEAK_ROLE_PLAY
  SPEAK_DESCRIPTION
  GRAMMAR_FILL_BLANK
  GRAMMAR_TRANSFORMATION
  VOCAB_MATCHING
  VOCAB_CLZE
  PRONUN_MINIMAL_PAIR
  PRONUN_STRESS
  PRONUN_INTONATION
  FUNCTIONAL_DIALOG
  MEDIATION_SUMMARIZE
  MEDIATION_REPHRASE
  ASSESS_SECTION // phần thi (nghe/đọc/nói/viết)
}

enum QuestionType {
  SINGLE_CHOICE
  MULTI_CHOICE
  TRUE_FALSE
  SHORT_TEXT
  LONG_TEXT
  ORDERING
  MATCHING
  GAP_FILL
  AUDIO_RECORD // nộp file/ghi âm
  FILE_UPLOAD
}

enum MediaType {
  AUDIO
  VIDEO
  IMAGE
  TEXT
  PDF
}

// ------------------------------------------------------
// Auth (NextAuth.js 5+)
// ------------------------------------------------------
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role Role @default(USER)

  // học tập
  progress    UserProgress[]
  attempts    Attempt[]
  submissions Submission[]   @relation("SubmissionOwner") // <-- thêm tên quan hệ
  gradedSubs  Submission[]   @relation("SubmissionGrader") // <-- mới: những bài do user này chấm
  recordings  Recording[]

  // authoring
  contents   Content[]  @relation("AuthorContents")
  activities Activity[] @relation("AuthorActivities")
  questions  Question[] @relation("AuthorQuestions")

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ------------------------------------------------------
// Taxonomy / Tagging
// ------------------------------------------------------
model Topic {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  description String?
  contents    Content[] @relation("TopicsOnContents")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  contents  Content[] @relation("TagsOnContents") // đặt tên quan hệ
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// ------------------------------------------------------
// Content hierarchy: Module -> Unit(Lesson) -> Activity
// ------------------------------------------------------
model Module {
  id          String     @id @default(cuid())
  code        String     @unique
  type        ModuleType
  title       String
  description String?
  levelMin    CEFRLevel  @default(A1)
  levelMax    CEFRLevel  @default(C2)

  units Unit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
}

model Unit {
  id       String    @id @default(cuid())
  moduleId String
  order    Int       @default(1)
  title    String
  overview String?
  level    CEFRLevel
  skill    Skill

  module     Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contents   Content[] // mô tả/nguồn
  activities Activity[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UserProgress UserProgress[]

  @@index([moduleId, order])
  @@index([skill, level])
}

// Nội dung học liệu (bài đọc, audio, transcript, realia, link…)
model Content {
  id        String    @id @default(cuid())
  unitId    String
  authorId  String?
  title     String
  summary   String?
  sourceUrl String?
  level     CEFRLevel
  skill     Skill
  locale    String    @default("en") // ngôn ngữ nguồn
  html      String? // rich text đã sanitize
  plainText String? // fallback
  metadata  Json?

  unit   Unit         @relation(fields: [unitId], references: [id], onDelete: Cascade)
  author User?        @relation("AuthorContents", fields: [authorId], references: [id])
  media  MediaAsset[]
  topics Topic[]      @relation("TopicsOnContents")
  tags   Tag[]        @relation("TagsOnContents")

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  Question            Question[]
  GrammarPoint        GrammarPoint?      @relation(fields: [grammarPointId], references: [id])
  grammarPointId      String?
  VocabEntry          VocabEntry?        @relation(fields: [vocabEntryId], references: [id])
  vocabEntryId        String?
  PronunciationItem   PronunciationItem? @relation(fields: [pronunciationItemId], references: [id])
  pronunciationItemId String?

  @@index([unitId])
  @@index([skill, level])
}

model MediaAsset {
  id        String    @id @default(cuid())
  contentId String?
  url       String
  type      MediaType
  durationS Int? // cho audio/video
  mime      String?
  meta      Json?

  content    Content?   @relation(fields: [contentId], references: [id], onDelete: SetNull)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Activity   Activity?  @relation(fields: [activityId], references: [id])
  activityId String?
  Question   Question[]
}

// ------------------------------------------------------
// Activity (bài tập/bài nói/bài viết/section đánh giá…) & câu hỏi
// ------------------------------------------------------
model Activity {
  id           String       @id @default(cuid())
  unitId       String
  authorId     String?
  type         ActivityType
  title        String
  instruction  String?
  maxScore     Int? // tổng điểm
  timeLimitSec Int? // nếu là test/section
  level        CEFRLevel
  skill        Skill

  unit      Unit         @relation(fields: [unitId], references: [id], onDelete: Cascade)
  author    User?        @relation("AuthorActivities", fields: [authorId], references: [id])
  media     MediaAsset[] // audio/video kèm hoạt động (nghe/nói)
  questions Question[]
  attempts  Attempt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([unitId, type])
  @@index([skill, level])
}

model Question {
  id          String       @id @default(cuid())
  activityId  String
  authorId    String?
  order       Int          @default(1)
  type        QuestionType
  prompt      String // HTML hoặc Markdown đã sanitize
  explanation String?
  score       Int          @default(1)
  data        Json? // cấu trúc phụ: pairs cho matching, gaps cho gap-fill…
  // cho nghe/đọc: liên kết đến media hoặc content cụ thể
  mediaId     String?
  contentId   String?

  activity    Activity           @relation(fields: [activityId], references: [id], onDelete: Cascade)
  author      User?              @relation("AuthorQuestions", fields: [authorId], references: [id])
  media       MediaAsset?        @relation(fields: [mediaId], references: [id], onDelete: SetNull)
  content     Content?           @relation(fields: [contentId], references: [id], onDelete: SetNull)
  choices     Choice[]
  answers     AnswerKey[] // đáp án đúng (nhiều nếu MULTI_CHOICE/matching/gap-fill)
  submissions AnswerSubmission[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Submission Submission[]

  @@index([activityId, order])
}

model Choice {
  id         String  @id @default(cuid())
  questionId String
  order      Int     @default(1)
  text       String // hoặc HTML
  value      String? // giá trị nội bộ
  isCorrect  Boolean @default(false) // redundancy để check nhanh MCQ

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId, order])
}

model AnswerKey {
  id         String @id @default(cuid())
  questionId String
  key        String // đáp án đúng (text/value), JSON nếu phức tạp
  meta       Json?

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

// ------------------------------------------------------
// Nộp bài / chấm điểm / ghi âm
// ------------------------------------------------------
model Attempt {
  id          String    @id @default(cuid())
  userId      String
  activityId  String
  startedAt   DateTime  @default(now())
  submittedAt DateTime?
  score       Int? // tổng điểm attempt
  status      String    @default("in_progress") // in_progress | submitted | graded
  meta        Json?

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity    Activity     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@unique([userId, activityId, startedAt])
  @@index([userId, activityId])
}

model Submission {
  id         String    @id @default(cuid())
  attemptId  String
  userId     String
  questionId String
  // lưu bài nộp theo dạng chung
  answerText String?
  answerJson Json?
  chosenIds  String[]
  isCorrect  Boolean?
  score      Int?
  feedback   String?
  gradedAt   DateTime?
  graderId   String?

  attempt  Attempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  user     User     @relation("SubmissionOwner", fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  grader   User?    @relation("SubmissionGrader", fields: [graderId], references: [id])

  recordings Recording[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  AnswerSubmission AnswerSubmission[]

  @@index([attemptId, questionId])
}

model Recording {
  id           String @id @default(cuid())
  submissionId String
  userId       String
  url          String
  durationS    Int?
  waveform     Json? // optional: lưu sample để render
  meta         Json?

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([submissionId])
}

// ------------------------------------------------------
// Kiến thức ngôn ngữ có cấu trúc (Grammar / Vocab / Pronunciation)
// có thể liên kết vào Content hoặc Activity qua bảng nối
// ------------------------------------------------------
model GrammarPoint {
  id          String    @id @default(cuid())
  title       String
  level       CEFRLevel
  explanation String?
  patterns    String? // mô tả cấu trúc
  examples    Json? // mảng ví dụ

  contents  Content[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([level])
}

model VocabEntry {
  id           String     @id @default(cuid())
  lemma        String
  pos          String? // noun/verb/adj…
  phonetic     String?
  level        CEFRLevel?
  definition   String?
  examples     Json? // mảng ví dụ
  synonyms     String[]
  antonyms     String[]
  families     String[] // word families
  collocations String[]
  idioms       String[]
  phrasalVerbs String[]

  contents Content[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lemma])
}

model PronunciationItem {
  id          String     @id @default(cuid())
  title       String // ví dụ: /θ/ vs /ð/, stress rules, linking rules
  level       CEFRLevel?
  description String?
  examples    Json?

  contents  Content[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// ------------------------------------------------------
// Tiến độ người học
// ------------------------------------------------------
model UserProgress {
  id       String    @id @default(cuid())
  userId   String
  unitId   String
  status   String    @default("not_started") // not_started | in_progress | completed
  lastSeen DateTime?
  scoreSum Int? // tổng điểm tốt nhất
  meta     Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@unique([userId, unitId])
  @@index([status])
}

model AnswerSubmission {
  id           String @id @default(cuid())
  questionId   String
  submissionId String
  data         Json // chi tiết cho matching/order/gap-fill (mapping, thứ tự…)

  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([submissionId])
}
